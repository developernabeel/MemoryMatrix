@using MemoryMatrix.Models;
@{
    ViewBag.Title = "Index";
    Layout = "~/Views/Shared/_Layout.cshtml";
    GameSession gameSession = ViewBag.gameSession;
    Matrix matrix = ViewBag.matrix;
}
@section Head{
    <style>
        .center {
            margin-left: 26%;
            margin-top: 10px;
        }

        .matrix {
            background-color: grey;
        }

        .tile-container {
            /*width: 296px;
            height: 296px;*/
            border: 1px solid black;
            float: left;
            margin: 1px;
        }

        .green-tile {
            background-color: #68d26a;
        }

        .red-tile {
            background-color: #FF4D4D;
        }

        .white-tile {
            background-color: white;
        }
    </style>
}

<h2>Index</h2>
<div class="center">
    <span>Matrix Level @gameSession.Level</span>
    <div id="matrix-div" class="matrix" style="width:@(matrix.Width)px;height:@(matrix.Height)px">
        @for (int i = 0; i < matrix.NoOfTiles; i++)
        {
            <div class="tile-container clickable" id="container-@(i+1)" data-tilenumber="@i" style="width:@(matrix.CellWidth)px;height:@(matrix.CellHeight)px">
                <div class="front white-tile">
                    <!-- front content -->
                </div>
                <div class="back red-tile">
                    <!-- back content -->
                </div>
            </div>
        }
    </div>
</div>
@section scripts{
    <script src="~/Scripts/jquery.flip.min.js"></script>
    <script>
        // Global variable
        var currentLevel = @gameSession.Level;
        var noOfTiles = @matrix.NoOfTiles;

        $(function () {
            $(".tile-container").flip({
                axis: "y", // y or x
                trigger: "manual", // click or hover
                speed: 400
            });

            $('#matrix-div').on('click','.clickable',function() {
                if(MemoryMatrix.Store.getEnableClick()){
                    var self = $(this);
                    self.flip(true);
                    self.removeClass('clickable');
                    var id = self.attr('id');
                    MemoryMatrix.Game.CheckCorrectPattern(id);
                }
            });

            MemoryMatrix.Init.arrangeTiles();
            MemoryMatrix.Init.showTiles();
        });

        var MemoryMatrix = MemoryMatrix || {};

        MemoryMatrix.Store = function(){
            // Private
            var greenTileArray;
            var selectionArray = [];

            var showTileInitialDelay = 1;
            var showTileDuration = 2 + Math.floor(currentLevel /2);
            var enableClick = false;

            // Public
            return {

                getGreenTileArray : function(){
                    return greenTileArray;
                },
                setGreenTileArray : function(array){
                    greenTileArray = array;
                },

                getSelectionArray : function(){
                    return selectionArray;
                },
                setSelectionArray : function(array){
                    selectionArray = array;
                },

                getShowTileInitialDelay : function(){
                    return showTileInitialDelay * 1000;
                },
                getShowTileDuration : function(){
                    return (showTileInitialDelay + showTileDuration) * 1000;
                },

                getEnableClick : function(){
                    return enableClick;
                },
                setEnableClick : function(value){
                    enableClick = value;
                }
            };
        }();

        MemoryMatrix.Init = function(){
            // Private
            var totalGreenTile = Math.floor(noOfTiles/2) + 1;

            var getRandomInt = function (min, max) {
                return Math.floor(Math.random() * (max - min)) + min;
            }

            var calculateGreenTiles = function() {
                var greenTileArray = [];
                while (greenTileArray.length != totalGreenTile) {
                    var randomInt = getRandomInt(0, (noOfTiles + 1));
                    if(greenTileArray.indexOf(randomInt)== -1){
                        greenTileArray.push(randomInt);
                    }
                }
                MemoryMatrix.Store.setGreenTileArray(greenTileArray);
            };

            var addGreenTiles = function() {
                $('.tile-container').each(function(index,val){
                    var self = $(this);
                    var tileNumber = parseInt(self.attr('data-tilenumber'));
                    var greenTileArray = MemoryMatrix.Store.getGreenTileArray();
                    if(greenTileArray.indexOf(tileNumber)!=-1){
                        self.addClass('hasRt');
                        self.find('.back').removeClass('red-tile').addClass('green-tile');
                    }
                });
            };

            // Public
            return {
                arrangeTiles : function(){
                    calculateGreenTiles();
                    addGreenTiles();
                },

                showTiles : function() {
                    // Initial delay before showing tiles.
                    setTimeout(function() {
                        $('.hasRt').flip(true);
                    }, MemoryMatrix.Store.getShowTileInitialDelay());

                    // Hide tiles again.
                    setTimeout(function() {
                        $('.hasRt').flip(false);
                        // Enable clicking on matrix.
                        MemoryMatrix.Store.setEnableClick(true);
                    }, MemoryMatrix.Store.getShowTileDuration());
                }
            };
        }();

        MemoryMatrix.Game = function(){
            // Private

            // Public
            return {
                CheckCorrectPattern : function(selectedTileId) {
                    var selectedTile = $('#'+selectedTileId);
                    // Wrong answer
                    if(selectedTile.find('.green-tile').length == 0){
                        MemoryMatrix.Store.setEnableClick(false);
                        alert('Wrong selection!!!');
                    }
                    else {
                        var selectionArray = MemoryMatrix.Store.getSelectionArray();
                        var totalGreenTiles = MemoryMatrix.Store.getGreenTileArray().length;
                        var tileNumber = parseInt(selectedTile.attr('data-tilenumber'));
                        selectionArray.push(tileNumber);
                        if(selectionArray.length >= totalGreenTiles){
                            alert('Level completed');
                            MemoryMatrix.Store.setEnableClick(false);
                        }
                        else{
                            MemoryMatrix.Store.setSelectionArray(selectionArray);
                        }
                    }
                }
            };
        }();
    </script>
}