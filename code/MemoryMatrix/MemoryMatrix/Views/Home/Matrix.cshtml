@using MemoryMatrix.Models;
@{
    ViewBag.Title = "Memory Matrix";
    Layout = "~/Views/Shared/_Layout.cshtml";
    GameSession gameSession = ViewBag.gameSession;
    Matrix matrix = ViewBag.matrix;
}
@section Head{

}

<!-- Bootstrap message modal -->
<div id="message-modal" class="modal fade" tabindex="-1" role="dialog">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
                <h4 class="modal-title"><span id="modal-title"></span></h4>
            </div>
            <div class="modal-body">
                <p id="modal-message"></p>
            </div>
            <div class="modal-footer">
                <p id="modal-prac-link" style="float: left; font-size: 13px;">
                    <a href="@Url.Action("Matrix", "Home", new { mode = "p" }, "")">Having Difficulty? Try Practice Mode</a>
                </p>
                <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
            </div>
        </div>
        <!-- /.modal-content -->
    </div>
    <!-- /.modal-dialog -->
</div>
<!-- /.modal -->
<!-- End Bootstrap modal -->

<!-- Bootstrap tutorial modal -->
<div id="tutorial-modal" class="modal fade" tabindex="-1" role="dialog">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h4 class="modal-title">Overview</h4>
            </div>
            <div class="modal-body col-md-12">
                <div class="col-md-6">
                    <img src="~/Content/images/tutorial_img_1.png" class="tutorial-image-center" width="200" height="200" />
                    <div style="margin-top: 10px; padding-left: 12px;">
                        <p>At the beginning of each level, green tiles will be shown for some seconds and will be flipped back.</p>
                    </div>
                </div>
                <div class="col-md-6">
                    <img src="~/Content/images/tutorial_img_2.png" class="tutorial-image-center" width="200" height="200" />
                    <div style="margin-top: 10px; padding-left: 12px;">
                        <p>You have to guess all the green tiles correctly, Try not to flip the red tiles else level will be failed.</p>
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <button id="btn-close-tutorial" type="button" class="btn btn-default" data-dismiss="modal">Got it</button>
            </div>
        </div>
        <!-- /.modal-content -->
    </div>
    <!-- /.modal-dialog -->
</div>
<!-- /.modal -->
<!-- End Bootstrap modal -->

<!-- Page Content -->
<div class="row">
    <!-- Left Column -->
    <div class="col-md-3">
        <table class="table">
            <tbody>
                <tr>
                    <td>
                        <h2>Memory Matrix</h2>
                    </td>
                </tr>
                <tr>
                    <td><a class="btn btn-default btn-lg btn-block" href="@Url.Action("Index", "Home")" role="button">Main Menu</a></td>

                </tr>
            </tbody>
        </table>
    </div>

    <!-- Center Column -->
    <div class="col-md-6">
        <div style="margin-top: 39px;">
            <h4>Level : @gameSession.Level</h4>
        </div>
        <div id="matrix-div" class="matrix" style="width:@(matrix.Width)px;height:@(matrix.Height)px">
            @for (int i = 0; i < matrix.NoOfTiles; i++)
            {
                <div class="tile-container clickable" id="container-@(i + 1)" data-tilenumber="@i" style="width:@(matrix.CellWidth)px;height:@(matrix.CellHeight)px">
                    <div class="front white-tile">
                        <!-- front content -->
                    </div>
                    <div class="back red-tile">
                        <!-- back content -->
                    </div>
                </div>
            }
        </div>
        <div class="message-container">
            <span id="message" style="display: none"></span>
        </div>
    </div>

    <!-- Right Column -->
    <div class="col-md-3">
        <div class="scoreboard">
            <table>
                <tbody>
                    <tr>
                        <td class="scoreboard-row" style="padding-bottom: 15px;">
                            <h1 id="scoreboard-flipped" class="wd105px"></h1>
                            <h4 class="wd105px">Flipped Tiles</h4>
                        </td>
                    </tr>
                    <tr>
                        <td class="scoreboard-row" style="border-top: 1px solid #ddd;">
                            <h1 id="scoreboard-green" class="wd105px"></h1>
                            <h4 class="wd105px">Green Tiles</h4>
                        </td>
                    </tr>
                </tbody>
            </table>
        </div>
    </div>
</div>

@section scripts{
    <script src="~/Scripts/bootstrap.min.js"></script>
    <script src="~/Scripts/jquery.flip.min.js"></script>
    <script>
        // Global variables
        var currentLevel = @gameSession.Level;
        var gameMode = '@gameSession.Mode';
        var noOfTiles = @matrix.NoOfTiles;

        $(function () {
            // Initialize flip function
            $(".tile-container").flip({
                axis: "y", // y or x
                trigger: "manual", // click or hover
                speed: 300
            });

            // Initialize Modals
            $('#message-modal').modal({
                show: false,
                keyboard: true
            });

            $('#tutorial-modal').modal({
                show: false,
                keyboard: false,
                backdrop: 'static' // Can be closed from button only
            });

            $('#matrix-div').on('click', '.clickable', function () {
                if (MemoryMatrix.Store.getIsClickEnabled()) {
                    var self = $(this);
                    self.flip(true);
                    self.removeClass('clickable');
                    var id = self.attr('id');
                    setTimeout(function() { MemoryMatrix.Game.checkCorrectPattern(id); }, 300);
                }
            });

            $('#btn-close-tutorial').on('click', function() {
                setTimeout(function() {
                    MemoryMatrix.Init.showTiles();
                }, 1000);
            });

            MemoryMatrix.Init.arrangeTiles();
            MemoryMatrix.Init.showTutorial(MemoryMatrix.Init.showTiles);
            MemoryMatrix.Game.updateScoreBoard();
        });

        var MemoryMatrix = MemoryMatrix || {};

        MemoryMatrix.Store = function () {
            // Private
            var greenTileArray;
            var selectionArray = [];

            var showTileInitialDelay = 1;
            var showTileDuration = 2 + Math.floor(currentLevel / 2);
            var isClickEnabled = false;
            var showMessageDuration = 3000;

            var gameOverMessages = [
                {
                    level: 2,
                    messages: [
                        'Seriously? This is the easiest level and you failed in that?',
                        'You have failed at level ##LEVEL##? Go home, you are drunk...',
                        'You kidding me? even a 4 year old can solve this level!',
                        'You have failed at level ##LEVEL##, Are you playing with your eyes closed?'
                    ]
                },
                {
                    level: 4,
                    messages: [
                        'Well this is embarrassing! This level is not that hard',
                        'Haha! You failed at level ##LEVEL##, Thats a shame!',
                        'No way! How can you fail at this level, try to use your brain...'
                    ]
                },
                {
                    level: 6,
                    messages: [
                        'The difficulty has just started, try to do it better',
                        'Try to improve your memory, try again',
                        'You can do better, use your head...'
                    ]
                },
                {
                    level: 8,
                    messages: [
                        'Better luck next time!!!',
                        'You made it till level ##LEVEL##, it was fun, wasn\'t it?'
                    ]
                },
                {
                    level: 12,
                    messages: [
                        'Well played, this level requires some good memory, way to go!!!',
                        'You have made it till level ##LEVEL##, well played'
                    ]
                },
                {
                    level: 20,
                    messages: [
                        'You are either a genius or a cheater, anyway.. well played'
                    ]
                }
            ];

            // Public
            return {

                getGreenTileArray: function () {
                    return greenTileArray;
                },
                setGreenTileArray: function (array) {
                    greenTileArray = array;
                },

                getSelectionArray: function () {
                    return selectionArray;
                },
                setSelectionArray: function (array) {
                    selectionArray = array;
                },

                getShowTileInitialDelay: function () {
                    return showTileInitialDelay * 1000;
                },
                getShowTileDuration: function () {
                    return (showTileInitialDelay + showTileDuration) * 1000;
                },

                getIsClickEnabled: function () {
                    return isClickEnabled;
                },
                setIsClickEnabled: function (value) {
                    isClickEnabled = value;
                },

                getShowMessageDuration: function () {
                    return showMessageDuration;
                },
                setShowMessageDuration: function (value) {
                    showMessageDuration = value;
                },

                getGameOverMessage: function(level) {
                    for(var i = 0; i < gameOverMessages.length; i++) {
                        if(level <= gameOverMessages[i].level) {
                            var messageArray = gameOverMessages[i].messages;
                            var min = 0;
                            var max = messageArray.length;
                            var random = Math.floor(Math.random() * (max - min)) + min;
                            var message = messageArray[random];
                            message = message.replace('##LEVEL##', level);
                            return message;
                        }
                    }
                }
            };
        }();

        MemoryMatrix.Init = function () {
            // Private
            var totalGreenTile = Math.sqrt(noOfTiles) * 2 - 1;

            // Calculates the positions of adjacent tiles around the tile of a given position.
            var getAdjacentTiles = function(totalTiles, pos) {
                var adjacentTile = {
                    topLeft : null,
                    top : null,
                    topRight : null,
                    left : null,
                    right : null,
                    bottomLeft : null,
                    bottom : null,
                    bottomRight : null
                };

                var sideLen = Math.sqrt(totalTiles);
                var isOnTop, isFarLeft, isFarRight, isOnBottom;
                isOnTop = isFarLeft = isFarRight = isOnBottom = false;
                
                // Check Top Line
                if (pos < sideLen)
                {
                    // Cell is on top line, there will be no top adjacent cells.
                    isOnTop = true;
                }
                    // Check Bottom Line
                else if (pos >= (totalTiles - sideLen))
                {
                    // Cell is on bottom line, there will be no bottom adjacent cells.
                    isOnBottom = true;
                }

                // Check far left
                if ((sideLen + pos) % sideLen == 0)
                {
                    // Cell is on far left, there will be no left adjacent cells.
                    isFarLeft = true;
                }
                    // Check far right
                else if ((sideLen + pos) % sideLen == (sideLen - 1))
                {
                    // Cell is on far right, there will be no right adjacent cells.
                    isFarRight = true;
                }

                // Calculate coordinates
                // Top Layer
                if (!isOnTop && !isFarLeft)
                    adjacentTile.topLeft = pos - sideLen - 1;

                if (!isOnTop)
                    adjacentTile.top = pos - sideLen;

                if (!isOnTop && !isFarRight)
                    adjacentTile.topRight = pos - sideLen + 1;

                // Middle Layer
                if (!isFarLeft)
                    adjacentTile.left = pos - 1;

                if (!isFarRight)
                    adjacentTile.right = pos + 1;

                // Bottom Layer
                if (!isOnBottom && !isFarLeft)
                    adjacentTile.bottomLeft = pos + sideLen - 1;

                if (!isOnBottom)
                    adjacentTile.bottom = pos + sideLen;

                if (!isOnBottom && !isFarRight)
                    adjacentTile.bottomRight = pos + sideLen + 1;

                return adjacentTile;
            }

            // Searches the green tiles array and returns if the given tile position is adjacent to any of the green tiles in array.
            var isAdjacentToGreenTiles = function(greenTiles,totalTiles, pos) {
                var adjacentTile = getAdjacentTiles(totalTiles, pos);
                if (greenTiles.indexOf(adjacentTile.topLeft) != -1) {
                    return true;
                }
                if (greenTiles.indexOf(adjacentTile.top) != -1) {
                    return true;
                }
                if (greenTiles.indexOf(adjacentTile.topRight) != -1) {
                    return true;
                }
                if (greenTiles.indexOf(adjacentTile.left) != -1) {
                    return true;
                }
                if (greenTiles.indexOf(adjacentTile.right) != -1) {
                    return true;
                }
                if (greenTiles.indexOf(adjacentTile.bottomLeft) != -1) {
                    return true;
                }
                if (greenTiles.indexOf(adjacentTile.bottom) != -1) {
                    return true;
                }
                if (greenTiles.indexOf(adjacentTile.bottomRight) != -1) {
                    return true;
                }
                return false;
            }

            var getRandomInt = function (min, max) {
                return Math.floor(Math.random() * (max - min)) + min;
            }

            // Algorithm for arranging tiles inside the matrix.
            var calculateGreenTiles = function () {
                var greenTileArray = [];
                while (greenTileArray.length != totalGreenTile) {
                    // Calculates Random tile position.
                    var randomInt = getRandomInt(0, noOfTiles);
                    if (greenTileArray.indexOf(randomInt) == -1) {
                        
                        // If there is not tile inside greenTileArray, push the random tile
                        if(greenTileArray.length == 0)
                            greenTileArray.push(randomInt);
                            // Else check if the position is adjacent to any other green tile, if yes; push it inside array.
                        else if(isAdjacentToGreenTiles(greenTileArray, noOfTiles,randomInt))
                            greenTileArray.push(randomInt);
                    }
                }
                MemoryMatrix.Store.setGreenTileArray(greenTileArray);
            };

            var addGreenTiles = function () {
                $('.tile-container').each(function () {
                    var self = $(this);
                    var tileNumber = parseInt(self.attr('data-tilenumber'));
                    var greenTileArray = MemoryMatrix.Store.getGreenTileArray();
                    if (greenTileArray.indexOf(tileNumber) != -1) {
                        self.addClass('hasRt');
                        self.find('.back').removeClass('red-tile').addClass('green-tile');
                    }
                });
            };

            var createCookie = function(name,value,days) {
                if (days) {
                    var date = new Date();
                    date.setTime(date.getTime()+(days*24*60*60*1000));
                    var expires = "; expires="+date.toGMTString();
                }
                else var expires = "";
                document.cookie = name+"="+value+expires+"; path=/";
            };

            var readCookie = function(name) {
                var nameEQ = name + "=";
                var ca = document.cookie.split(';');
                for(var i=0;i < ca.length;i++) {
                    var c = ca[i];
                    while (c.charAt(0)==' ') c = c.substring(1,c.length);
                    if (c.indexOf(nameEQ) == 0) return c.substring(nameEQ.length,c.length);
                }
                return null;
            };

            // Public
            return {
                arrangeTiles: function () {
                    calculateGreenTiles();
                    addGreenTiles();
                },

                showTiles: function () {
                    // Initial delay before showing tiles.
                    setTimeout(function () {
                        $('.hasRt').flip(true);
                    }, MemoryMatrix.Store.getShowTileInitialDelay());

                    // Hide tiles again.
                    setTimeout(function () {
                        $('.hasRt').flip(false);
                        // Enable clicking on matrix.
                        MemoryMatrix.Store.setIsClickEnabled(true);
                    }, MemoryMatrix.Store.getShowTileDuration());
                },

                showTutorial: function (callback) {
                    var isTutorialShown = readCookie('mm_tutorial_shown');
                    if(isTutorialShown === null || isTutorialShown === false) {
                        $('#tutorial-modal').modal('show');
                        createCookie('mm_tutorial_shown', true, 30);
                    }
                    else {
                        callback();
                    }
                }
            };
        }();

        MemoryMatrix.Game = function () {
            // Private
            var changeLevel = function (level) {
                $.ajax({
                    type: 'POST',
                    data: { 'level': level },
                    url: '@Url.Action("ChangeLevel", "Home")',
                    success: function () {
                        location.reload();
                    }
                });
            };

            var clearSession = function() {
                $.ajax({
                    type: 'POST',
                    url: '@Url.Action("ClearSession", "Home")',
                    success: function () { }
                });
            }

            // Public
            return {
                checkCorrectPattern: function (selectedTileId) {
                    var selectedTile = $('#' + selectedTileId);
                    // Wrong answer
                    if (selectedTile.find('.green-tile').length == 0) {
                        MemoryMatrix.Store.setIsClickEnabled(false);
                        
                        if (gameMode == 'c') {
                            // Challenge mode, clear session to reset the level.
                            clearSession();
                            MemoryMatrix.Game.showMessage('Wrong selection!!!', true, function() {
                                MemoryMatrix.Game.hideMessage();
                                var message = MemoryMatrix.Store.getGameOverMessage(currentLevel);
                                MemoryMatrix.Game.showModal('Game Over', message);
                            });
                        }
                        else {
                            // Practice mode, reload current level again.
                            MemoryMatrix.Game.showMessage('Wrong selection, Try again', true, function() {
                                MemoryMatrix.Game.hideMessage();
                                window.location.reload();
                            });
                        }

                        $('.tile-container').flip(true);
                    }
                    else {
                        var selectionArray = MemoryMatrix.Store.getSelectionArray();
                        var totalGreenTiles = MemoryMatrix.Store.getGreenTileArray().length;
                        var tileNumber = parseInt(selectedTile.attr('data-tilenumber'));
                        selectionArray.push(tileNumber);

                        if (selectionArray.length >= totalGreenTiles) {
                            // All green tiles flipped.
                            MemoryMatrix.Store.setIsClickEnabled(false);
                            var msg = 'Level ' + currentLevel + ' completed';

                            if (currentLevel < 20) {
                                MemoryMatrix.Game.showMessage(msg, false, function() {
                                    MemoryMatrix.Game.hideMessage();
                                });
                                setTimeout(function () { changeLevel(currentLevel + 1); }, MemoryMatrix.Store.getShowMessageDuration());
                            }
                            else {
                                // All levels have finished, clear the session.
                                clearSession();
                                MemoryMatrix.Game.showMessage(msg, false, function() {
                                    $('#modal-prac-link').hide();
                                    MemoryMatrix.Game.hideMessage();
                                    MemoryMatrix.Game.showModal('All Levels finished', 'Cool...You have finished all the levels, the beer is in the fridge ;)');
                                });
                            }
                        }
                        else {
                            MemoryMatrix.Store.setSelectionArray(selectionArray);
                        }
                        MemoryMatrix.Game.updateScoreBoard();
                    }
                },

                showMessage: function (message, isFailure, callback) {
                    var msgSpan = $('#message');
                    msgSpan.text(message);
                    if (isFailure)
                        msgSpan.addClass('failure-message');
                    else
                        msgSpan.addClass('success-message');

                    msgSpan.fadeIn(500);
                    // Call callback function after message duration ended.
                    setTimeout(callback, MemoryMatrix.Store.getShowMessageDuration());
                },

                hideMessage: function () {
                    var msgSpan = $('#message');
                    msgSpan.fadeOut(1000);
                    //msgSpan.text('');
                    msgSpan.removeClass('failure-message');
                    msgSpan.removeClass('success-message');
                },

                showModal: function (title, message) {
                    $('#modal-title').text(title);
                    $('#modal-message').text(message);
                    $('#message-modal').modal('show');
                },

                updateScoreBoard : function() {
                    var flippedTiles = MemoryMatrix.Store.getSelectionArray().length;
                    var greenTiles = MemoryMatrix.Store.getGreenTileArray().length;
                    $('#scoreboard-flipped').text(flippedTiles);
                    $('#scoreboard-green').text(greenTiles);
                }
            };
        }();
    </script>
}