@using MemoryMatrix.Models;
@{
    ViewBag.Title = "Memory Matrix";
    Layout = "~/Views/Shared/_Layout.cshtml";
    GameSession gameSession = ViewBag.gameSession;
    Matrix matrix = ViewBag.matrix;
}
@section Head{
    <link href="~/Content/Site.css" rel="stylesheet" />
    <link href="~/Content/Bootstrap/bootstrap.min.css" rel="stylesheet" />
}
<!-- Bootstrap modal -->
<div id="message-modal" class="modal fade" tabindex="-1" role="dialog">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
                <h4 class="modal-title"><span id="modal-title"></span></h4>
            </div>
            <div class="modal-body">
                <p id="modal-message"></p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
            </div>
        </div><!-- /.modal-content -->
    </div><!-- /.modal-dialog -->
</div><!-- /.modal -->
<!-- End Bootstrap modal -->

<h2>Memory Matrix</h2>
<div class="center">
    <h4>Level : @gameSession.Level</h4>
    <div id="matrix-div" class="matrix" style="width:@(matrix.Width)px;height:@(matrix.Height)px">
        @for (int i = 0; i < matrix.NoOfTiles; i++)
        {
            <div class="tile-container clickable" id="container-@(i+1)" data-tilenumber="@i" style="width:@(matrix.CellWidth)px;height:@(matrix.CellHeight)px">
                <div class="front white-tile">
                    <!-- front content -->
                </div>
                <div class="back red-tile">
                    <!-- back content -->
                </div>
            </div>
        }
    </div>
    <div class="message-container">
        <span id="message" style="display:none"></span>
    </div>
</div>
@section scripts{
    <script src="~/Scripts/bootstrap.min.js"></script>
    <script src="~/Scripts/jquery.flip.min.js"></script>
    <script>
        // Global variable
        var currentLevel = @gameSession.Level;
        var noOfTiles = @matrix.NoOfTiles;

        $(function () {
            $(".tile-container").flip({
                axis: "y", // y or x
                trigger: "manual", // click or hover
                speed: 400
            });

            $('#message-modal').modal({
                show : false,
                keyboard: true
            });

            $('#matrix-div').on('click','.clickable',function() {
                if(MemoryMatrix.Store.getEnableClick()){
                    var self = $(this);
                    self.flip(true);
                    self.removeClass('clickable');
                    var id = self.attr('id');
                    MemoryMatrix.Game.CheckCorrectPattern(id);
                }
            });

            MemoryMatrix.Init.arrangeTiles();
            MemoryMatrix.Init.showTiles();
        });

        var MemoryMatrix = MemoryMatrix || {};

        MemoryMatrix.Store = function(){
            // Private
            var greenTileArray;
            var selectionArray = [];

            var showTileInitialDelay = 1;
            var showTileDuration = 2 + Math.floor(currentLevel /2);
            var enableClick = false;
            var showMessageDuration = 3000;

            // Public
            return {

                getGreenTileArray : function(){
                    return greenTileArray;
                },
                setGreenTileArray : function(array){
                    greenTileArray = array;
                },

                getSelectionArray : function(){
                    return selectionArray;
                },
                setSelectionArray : function(array){
                    selectionArray = array;
                },

                getShowTileInitialDelay : function(){
                    return showTileInitialDelay * 1000;
                },
                getShowTileDuration : function(){
                    return (showTileInitialDelay + showTileDuration) * 1000;
                },

                getEnableClick : function(){
                    return enableClick;
                },
                setEnableClick : function(value){
                    enableClick = value;
                },

                getShowMessageDuration : function(){
                    return showMessageDuration;
                },
                setShowMessageDuration : function(value){
                    showMessageDuration = value;
                }
            };
        }();

        MemoryMatrix.Init = function(){
            // Private
            var totalGreenTile = Math.floor(noOfTiles/2) + 1;

            var getRandomInt = function (min, max) {
                return Math.floor(Math.random() * (max - min)) + min;
            }

            var calculateGreenTiles = function() {
                var greenTileArray = [];
                while (greenTileArray.length != totalGreenTile) {
                    var randomInt = getRandomInt(0, noOfTiles);
                    if(greenTileArray.indexOf(randomInt)== -1){
                        greenTileArray.push(randomInt);
                    }
                }
                MemoryMatrix.Store.setGreenTileArray(greenTileArray);
            };

            var addGreenTiles = function() {
                $('.tile-container').each(function(index,val){
                    var self = $(this);
                    var tileNumber = parseInt(self.attr('data-tilenumber'));
                    var greenTileArray = MemoryMatrix.Store.getGreenTileArray();
                    if(greenTileArray.indexOf(tileNumber)!=-1){
                        self.addClass('hasRt');
                        self.find('.back').removeClass('red-tile').addClass('green-tile');
                    }
                });
            };

            // Public
            return {
                arrangeTiles : function(){
                    calculateGreenTiles();
                    addGreenTiles();
                },

                showTiles : function() {
                    // Initial delay before showing tiles.
                    setTimeout(function() {
                        $('.hasRt').flip(true);
                    }, MemoryMatrix.Store.getShowTileInitialDelay());

                    // Hide tiles again.
                    setTimeout(function() {
                        $('.hasRt').flip(false);
                        // Enable clicking on matrix.
                        MemoryMatrix.Store.setEnableClick(true);
                    }, MemoryMatrix.Store.getShowTileDuration());
                }
            };
        }();

        MemoryMatrix.Game = function(){
            // Private
            var changeLevel = function(level) {
                
                $.ajax({
                    type:'POST',
                    data: {'level':level},
                    //contentType: "application/json; charset=utf-8",
                    //dataType:'json',
                    url:'@Url.Action("ChangeLevel","Home")',
                    success : function(){
                        location.reload();
                    }
                });
            }

            // Public
            return {
                CheckCorrectPattern : function(selectedTileId) {
                    var selectedTile = $('#'+selectedTileId);
                    // Wrong answer
                    if(selectedTile.find('.green-tile').length == 0){
                        MemoryMatrix.Store.setEnableClick(false);
                        MemoryMatrix.Game.ShowMessage('Wrong selection!!!', true);
                        MemoryMatrix.Game.ShowModal('Game Over','You have played till '+currentLevel+ ' Level, well played!!!');
                        MemoryMatrix.Store.setEnableClick(false);
                    }
                    else {
                        var selectionArray = MemoryMatrix.Store.getSelectionArray();
                        var totalGreenTiles = MemoryMatrix.Store.getGreenTileArray().length;
                        var tileNumber = parseInt(selectedTile.attr('data-tilenumber'));
                        selectionArray.push(tileNumber);

                        if(selectionArray.length >= totalGreenTiles){
                            MemoryMatrix.Game.ShowMessage('Level '+currentLevel+' completed',false);
                            MemoryMatrix.Store.setEnableClick(false);
                            setTimeout(function(){changeLevel(currentLevel + 1);},MemoryMatrix.Store.getShowMessageDuration());
                        }
                        else {
                            MemoryMatrix.Store.setSelectionArray(selectionArray);
                        }
                    }
                },

                ShowMessage : function(message, isFailure) {
                    var msgSpan = $('#message');
                    msgSpan.text(message);
                    if(isFailure)
                        msgSpan.addClass('failure-message');
                    else
                        msgSpan.addClass('success-message');
                    
                    msgSpan.fadeIn(1000);
                    setTimeout(MemoryMatrix.Game.HideMessage,MemoryMatrix.Store.getShowMessageDuration());
                },

                HideMessage : function() {
                    var msgSpan = $('#message');
                    msgSpan.fadeOut(1000);
                    //msgSpan.text('');
                    msgSpan.removeClass('failure-message');
                    msgSpan.removeClass('success-message');
                },

                ShowModal : function(title, message){
                    $('#modal-title').text(title);
                    $('#modal-message').text(message);
                    $('#message-modal').modal('show');
                }
            };
        }();
    </script>
}